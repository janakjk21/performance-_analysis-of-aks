apiVersion: apps/v1
kind: Deployment
metadata:
  name: backend
  namespace: perf
spec:
  replicas: 1
  selector:
    matchLabels: { app: backend }
  template:
    metadata:
      labels: { app: backend }
    spec:
      securityContext:
        runAsUser: 1001
        runAsGroup: 1001
        fsGroup: 1001
        fsGroupChangePolicy: OnRootMismatch
      volumes:
        - name: data
          emptyDir: {}
      containers:
        - name: backend
          image: aksmicroperfacr12507.azurecr.io/backend:1.0
          ports:
            - name: http
              containerPort: 8000
          envFrom:
            - configMapRef: { name: app-config }
            - secretRef:    { name: app-secrets }
          env:
            - name: ROOT_PATH
              value: "/api"
          volumeMounts:
            - name: data
              mountPath: /data
          resources:
            requests:
              cpu: 100m
              memory: 128Mi
            limits:
              cpu: 500m
              memory: 256Mi
          startupProbe:
            httpGet: { path: /api/health, port: 8000 }
            periodSeconds: 5
            failureThreshold: 30
          readinessProbe:
            httpGet: { path: /api/health, port: 8000 }
            initialDelaySeconds: 2
            periodSeconds: 10
            timeoutSeconds: 2
          livenessProbe:
            httpGet: { path: /api/health, port: 8000 }
            initialDelaySeconds: 10
            periodSeconds: 20
            timeoutSeconds: 2
---
apiVersion: v1
kind: Service
metadata:
  name: backend
  namespace: perf
  annotations:
    # let Prometheus scrape directly in-cluster
    prometheus.io/scrape: "true"
    prometheus.io/port: "8000"
    prometheus.io/path: "/metrics"
spec:
  selector: { app: backend }
  ports:
    - name: http
      port: 8000
      targetPort: 8000
      protocol: TCP
  